# PIPELINE DEFINITION
# Name: train-model
# Inputs:
#    normalized_dataset: system.Dataset
#    train_args: dict
# Outputs:
#    metrics: system.Metrics
#    model: system.Model
components:
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        normalized_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        train_args:
          parameterType: STRUCT
    outputDefinitions:
      artifacts:
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    train_args:dict,\n    normalized_dataset: Input[Dataset],\n\
          \    model: Output[Model],\n    metrics: Output[Metrics],\n\n):\n    import\
          \ joblib\n    import os\n    import pandas as pd\n    from sklearn.model_selection\
          \ import train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\n\
          \n    test_size = float(train_args['hyper_params']['in_test_size'].strip())\n\
          \    n_neighbors = int(train_args['hyper_params']['n_neighbors'].strip())\n\
          \n    with open(normalized_dataset.path) as f:\n        df = pd.read_csv(f)\n\
          \n    y = df.pop('Labels')\n    X = df\n\n    X_train, X_test, y_train,\
          \ y_test = train_test_split(X, y, random_state=0, test_size= test_size)\n\
          \n    clf = KNeighborsClassifier(n_neighbors=n_neighbors)\n    clf.fit(X_train,\
          \ y_train)\n\n    metrics.log_metric(\"accuracy\", 99)\n    metrics.log_metric(\"\
          framework\", \"sklearn\")\n    metrics.log_metric(\"dataset_size\", 100)\n\
          \    metrics.log_metric(\"AUC\", 0.4)    \n\n    print(f\"Metrics URI :\
          \ {metrics.uri}\")\n\n    # Export the model to a file\n    os.makedirs(model.path,\
          \ exist_ok=True)\n    joblib.dump(clf, os.path.join(model.path, \"model.joblib\"\
          ))        \n\n"
        image: python:3.10
pipelineInfo:
  name: train-model
root:
  dag:
    outputs:
      artifacts:
        metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: train-model
        model:
          artifactSelectors:
          - outputArtifactKey: model
            producerSubtask: train-model
    tasks:
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        inputs:
          artifacts:
            normalized_dataset:
              componentInputArtifact: normalized_dataset
          parameters:
            train_args:
              componentInputParameter: train_args
        taskInfo:
          name: train-model
  inputDefinitions:
    artifacts:
      normalized_dataset:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    parameters:
      train_args:
        parameterType: STRUCT
  outputDefinitions:
    artifacts:
      metrics:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      model:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.1
