# PIPELINE DEFINITION
# Name: normalize-dataset
# Inputs:
#    input_dataset: system.Dataset
#    normalize_args: dict
# Outputs:
#    normalized_dataset: system.Dataset
components:
  comp-normalize-dataset:
    executorLabel: exec-normalize-dataset
    inputDefinitions:
      artifacts:
        input_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        normalize_args:
          parameterType: STRUCT
    outputDefinitions:
      artifacts:
        normalized_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-normalize-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - normalize_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef normalize_dataset(\n    input_dataset: Input[Dataset],\n    normalized_dataset:\
          \ Output[Dataset],\n    normalize_args:dict,\n\n    # standard_scaler: bool,\n\
          \    # min_max_scaler: bool,\n):\n    import pandas as pd\n    from sklearn.preprocessing\
          \ import MinMaxScaler\n    from sklearn.preprocessing import StandardScaler\n\
          \n    standard_scaler = normalize_args['standard_scaler']\n    min_max_scaler\
          \ = normalize_args['min_max_scaler']\n\n    if standard_scaler is min_max_scaler:\n\
          \        raise ValueError(\n            'Exactly one of standard_scaler\
          \ or min_max_scaler must be True.')\n\n    with open(input_dataset.path)\
          \ as f:\n        df = pd.read_csv(f)\n    labels = df.pop('Labels')\n\n\
          \    if standard_scaler:\n        scaler = StandardScaler()\n    if min_max_scaler:\n\
          \        scaler = MinMaxScaler()\n\n    df = pd.DataFrame(scaler.fit_transform(df))\n\
          \    df['Labels'] = labels\n    with open(normalized_dataset.path, 'w')\
          \ as f:\n        df.to_csv(f)\n\n"
        image: python:3.10
pipelineInfo:
  name: normalize-dataset
root:
  dag:
    outputs:
      artifacts:
        normalized_dataset:
          artifactSelectors:
          - outputArtifactKey: normalized_dataset
            producerSubtask: normalize-dataset
    tasks:
      normalize-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-normalize-dataset
        inputs:
          artifacts:
            input_dataset:
              componentInputArtifact: input_dataset
          parameters:
            normalize_args:
              componentInputParameter: normalize_args
        taskInfo:
          name: normalize-dataset
  inputDefinitions:
    artifacts:
      input_dataset:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    parameters:
      normalize_args:
        parameterType: STRUCT
  outputDefinitions:
    artifacts:
      normalized_dataset:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.1
